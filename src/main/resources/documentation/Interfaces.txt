FE <-> BE Interfaces

/api/user/login
Description: Log in
Type: post
Input:
{ "username":"test4", "password":"test4" }
Output:
[{"username":"test4"}, {"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0NCIsInJvbGVzIjpbXSwiaWF0IjoxNTgyNTY1OTg3LCJleHAiOjE1ODI1Njk1ODd9.DvJoe56MT9f3ZTxsz_2OYSsJh_QLqD_s5RwwuPrUr9E"}]

/api/user/createUser
Description: Create new user
Type: post
Input: UserDTO
{
	"createdAt": "2018-05-30T16:19:58.016Z",
	"dateOfBirth": "2019-01-31",
	"username": "test1",
	"password": "test1",
	"enabled": "false"
}
Output:
["User created successfully"]

/api/myUser/updateUser
Description: Update user details
Type: post
Input: UserDTO
{
	"createdAt": "2018-05-30T16:19:58.016Z",
	"dateOfBirth": "2019-01-31",
	"username": "test1",
	"password": "test1",
	"enabled": "false"
}
Output:
{"message": "User updated!"}

/api/myUser/getUser/{username}
Description: Get user details
Type: get
Input: @PathVariable String username
Output:
{
    "createdAt": "2018-05-30T14:19:58.016Z",
    "enabled": false,
    "username": "test1",
    "password": null,
    "dateOfBirth": "2019-01-30"
}

/api/myUser/deleteUser
Description: Delete user details
Type: post
Input: UserDTO
{
	"createdAt": "2018-05-30T16:19:58.016Z",
	"dateOfBirth": "2020-01-01",
	"username": "test8",
	"password": "test8",
	"enabled": "true"
}
Output:
{"message": "User deleted!"}

/api/myUser/changePassword
Description: Change password to existing user
Type: post
Input: PasswordDTO
{
	"username": "test1",
	"oldPassword": "test1",
	"newPassword": "test10"
}
Output:
{"message": "Password updated!"}

/api/myUser/saveContactInfo
Description: Create new contact info
Type: post
Input: ContactInformationDTO
{
	"username": "test1",
	"telephoneNumber": "0800 091 092",
	"email": "my.email2 @email.com"
}
Output:
{"message": "Contact Information saved successfully"}

/api/myUser/deleteContactInfo
Description: Delete existing contact info (telephoneNumber and email are ignored)
Type: post
Input: ContactInformationDTO
{
	"username": "test1",
	"telephoneNumber": "0800 091 092",
	"email": "my.email2 @email.com"
}
Output:
{"message": "Contact Information deleted successfully"}

/api/myUser/getContactInfo/{username}
Description: Get user's contact details
Type: get
Input: @PathVariable String username
Output:
{
    "username": "test5",
    "telephoneNumber": "0985551234",
    "email": "my.email1@email.com"
}

/admin/create/camera
Description: Create new camera
Type: post
Input: 
{ 
   "id":"",
   "name":"camName",
   "videos":[ 
      { 
         "id":null,
         "location":""
      }
   ]
}
Output:
{
    "message": "Camera created!"
}

/admin/update/camera
Description: Update existing camera
Type: post
Input: 
{ 
   "id":"1",
   "name":"camName1",
   "videos":[ 
   ]
}
Output:
{
    "message": "Camera updated!"
}

/admin/delete/camera
Description: Delete existing camera
Type: post
Input: {id}
Output:
{
    "message": "Camera deleted!"
}

/api/reservations/reserve
Description: Reserve term
Type: post
Input: 
{ 
   "termId":"1",
   "userId":"1",
   "fieldId":"1"
}
Output:
Term reserved!

/api/reservations/update
Description: Update already reserved term
Type: post
Input: 
{ 
   "termId":"1",
   "userId":"1",
   "fieldId":"2"
}
Output:
Term updated!

/api/reservations/delete
Description: Delete already reserved term
Type: post
Input: 
{ 
   "termId":"1",
   "userId":"1",
   "fieldId":"2"
}
Output:
Term deleted!

/api/reservations/
Description: Get all available terms
Type: get
Input: none
Output:
[
    {
        "id": 2,
        "date": "2020-01-01",
        "timeFrom": "11:00:00",
        "timeTo": "12:00:00",
        "available": false,
        "videos": []
    }
]

/api/reservations/field/reservations/byDate/{stringDate}/{fieldId}/{isReserved}
Description: Filter terms by date, field, isReserved
Type: get
Input: eg. /api/reservations/field/reservations/byDate/2020-01-01/1/true
Output:
[
    {
        "id": 1,
        "date": "2019-12-31",
        "timeFrom": "11:00:00",
        "timeTo": "12:00:00",
        "available": true,
        "videos": []
    }
]

/api/user/uploadProfilePhoto
Description: Upload, modify, delete profile photo
Type: post
Input: MultipartFile profilePhoto, String username
	username as normal input param
	profilePhoto as key-value in request body
Output:
	{"message":"Successfully uploaded - KND9n.png"}
	
/api/user/getProfilePhoto
Description: Fetch profile photo
Type: get
Input: String username
Output: photo (as: "application/octet-stream")

/api/notifications/getNotifications
Description: Fetch notifications
Type: get
Input: String srcUser, String destUser (both optional)
Output: List<NotificationDTO>
[
    {
        "id": 2,
        "createdAt": "2019/12/31 23:00:00",
        "destUser": null,
        "srcUser": null,
        "subject": null,
        "message": "dsfds",
        "notificationType": null
    },
    {
        "id": 1,
        "createdAt": "2020/01/02 00:00:00",
        "destUser": null,
        "srcUser": null,
        "subject": "bbsubject",
        "message": "nnmess",
        "notificationType": "dfgsdf"
    }
]

/api/user/addNotification
Description: Add notification
Type: post
Input: NotificationDTO (u body-u)
{
	"id" : 1,
	"createdAt": "2020/01/02 00:00:00",
	"destUser": "test4",
	"srcUser": "test4",
	"subject": "add",
	"message": "addtest",
	"notificationType": "test"
}
Output: 
{"message":"Notification added"}

/api/user/updateNotification
Description: Update notification
Type: post
Input: NotificationDTO (u body-u)
{
	"id" : 1,
	"createdAt": "2020/01/02 00:00:00",
	"destUser": "test4",
	"srcUser": "test4",
	"subject": "update",
	"message": "updatetest",
	"notificationType": "test"
}
Output: 
{"message":"Notification updated"}

/api/user/deleteNotifications
Description: Delete notifications
Type: get
Input: List<Long> notificationIdList
Example: https://localhost:8443/api/notifications/deleteNotifications?notificationIdList=1,2
Output:
{"message":"Notifications deleted"}

/api/transactions/getTransactionDetails
Description: Fetch transaction details
Type: get
Input: String username or String transactionId
Example: https://localhost:8443/api/transactions/getTransactionDetails?username=test6&transactionId=12345
Output:
[
    {
        "id": 6,
        "username": "abcd",
        "transactionId": "12349",
        "timestamp": "2020-03-03T20:14:24.923Z",
        "transactionStatus": "FAILED"
    },
    {
        "id": 7,
        "username": "abcd",
        "transactionId": "12349-1583262890936",
        "timestamp": "2020-03-03T20:14:50.936Z",
        "transactionStatus": "FAILED"
    }
]

/api/transactions/saveTransactionDetails
Description: Add transaction details
Type: post
Input: TransactionDetailsDTO
{
	"id" : 44,
	"username": "test5",
	"transactionId": "#zui#",
	"timestamp": "2020-02-01T00:00:00.000Z",
	"transactionStatus": "SUCCESSFUL"
}
Example: https://localhost:8443/api/transactions/saveTransactionDetails
Output:
{"message":"Transaction details added"}

/api/transactions/deleteTransactionDetails
Description: Delete transaction details 
Type: get
Input: Long id
Example: https://localhost:8443/api/transactions/deleteTransactionDetails?id=1
Output:
{"message":"Transaction details deleted"}

/api/subscriptions/getSubscriptionTypes
Description: Fetch all subscription types 
Type: get
Input: 
Example: https://localhost:8443/api/subscriptions/getSubscriptionTypes
Output:

/api/subscriptions/saveSubscription
Description: Save subscription
Type: post
Input: SubscriptionDTO
{
	"valid": true,
	"validFrom": "2020-03-01T00:00:00.000Z",
	"validTo": "2020-03-10T00:00:00.000Z",
	"subscriptionTypeName": "DAILY",
	"username": "test6"
}
Example: https://localhost:8443/api/subscriptions/saveSubscription
Output:
{"message":"Subscription saved"}

/api/subscriptions/getActiveSubscription
Description: Fetch all active subscriptions for given user 
Type: get
Input: String username
Example: https://localhost:8443/api/subscriptions/getActiveSubscription?username=test6
Output:
[
    {
        "id": 11,
        "valid": true,
        "validFrom": "2020-03-01T00:00:00.000Z",
        "validTo": "2020-03-10T00:00:00.000Z",
        "subscriptionTypeName": "DAILY",
        "username": "test6"
    }
]

/api/subscriptions/getInactiveSubscription
Description: Fetch all inactive subscriptions for given user 
Type: get
Input: String username
Example: https://localhost:8443/api/subscriptions/getInactiveSubscription?username=test6
Output:
[
    {
        "id": 19,
        "valid": false,
        "validFrom": "2020-03-28T00:00:00.000Z",
        "validTo": "2020-03-29T00:00:00.000Z",
        "subscriptionTypeName": "DAILY",
        "username": "test6"
    }
]

/api/subscriptions/deleteSubscription
Description: Delete all active subscriptions for given user or single one by id
Type: get
Input: String username and/or Long subscriptionId
Example: https://localhost:8443/api/subscriptions/deleteSubscription?username=test6
Output:
{"message":"Subscription(s) deleted"}

/api/admin/getAdminStatistics
Description: Fetch application statistics interesting for admin user
Type: get
Input: none
Example: https://localhost:8443/api/admin/getAdminStatistics
Output:
{
    "numberOfUsers": 10,
    "numberOfLocations": 1,
    "numberOfFields": 1,
    "numberOfCameras": 1,
    "numberOfActiveVideos": 13,
    "subscriptionStatistics": [
        {
            "yyyymm": "2020-01",
            "subscriptionType": "DAILY",
            "sumPerType": "60"
        },
        {
            "yyyymm": "2020-01",
            "subscriptionType": "YEARLY",
            "sumPerType": "3600"
        },
        {
            "yyyymm": "2020-02",
            "subscriptionType": "DAILY",
            "sumPerType": "10"
        },
        {
            "yyyymm": "2020-02",
            "subscriptionType": "YEARLY",
            "sumPerType": "1200"
        },
        {
            "yyyymm": "2020-03",
            "subscriptionType": "DAILY",
            "sumPerType": "100"
        },
        {
            "yyyymm": "2020-04",
            "subscriptionType": "MONTHLY",
            "sumPerType": "240"
        }
    ],
    "diskSpaceInfo": [
        {
            "partition": "C:\\",
            "available": "107 GB",
            "used": "130 GB",
            "total": "238 GB"
        }
    ]
}

/api/notifications/searchBySubjectOrMessage
Description: Fetch notifications Filtering options: by parts of subject or message 
Type: get
Input: String subject and/or String message
Example: https://localhost:8443/api/notifications/searchBySubjectOrMessage?message=dd
Output:
[
    {
        "id": 2,
        "createdAt": "2020-01-01T00:00:00.000Z",
        "destUser": "test4",
        "srcUser": "test4",
        "subject": "eeeee",
        "message": "dddd",
        "notificationType": "UNREAD"
    }
]

/api/user/addUserRole
Description: Add new user role 
Type: put
Input: UserRoleDTO
{
	"username": "test3",
	"role": "role_user"
}
Example: https://localhost:8443/api/user/addUserRole
Output:
{"message":"User roles updated!"}

/api/user/revokeUserRole
Description: Revoke new user role 
Type: put
Input: UserRoleDTO
{
	"username": "test3",
	"role": "role_user"
}
Example: https://localhost:8443/api/user/revokeUserRole
Output:
{"message":"User roles updated!"}

/api/admin/addApplicationProperty
Description: add/update application property
Type: put
Input: ApplicationPropertiesDTO
{
	"username": "test3",
	"key": "myKey1",
	"value": "myValue3"
}
Example: https://localhost:8443/api/admin/addApplicationProperty
Output:
{
    "message": "Application property added/updated!"
}

/api/user/getUserRoles
Description: Fetch user roles
Type: get
Input: String username
Example: https://localhost:8443/api/user/getUserRoles?username=test2
Output:
[
    {
        "id": 1,
        "name": "role_user"
    },
    {
        "id": 2,
        "name": "role_admin"
    }
]

/api/subscriptions/getAllSubscriptions
Description: Fetch all subscriptions
Type: get
Input: boolean active
Example: https://localhost:8443/api/subscriptions/getAllSubscriptions?active=true
Output:
[
    {
        "id": 17,
        "valid": true,
        "validFrom": "2020-03-21T09:18:58.661Z",
        "validTo": "2020-04-21T09:18:58.661Z",
        "subscriptionTypeName": "MONTHLY",
        "username": "test4"
    },
    {
        "id": 18,
        "valid": true,
        "validFrom": "2020-04-01T00:00:00.000Z",
        "validTo": "2020-04-10T00:00:00.000Z",
        "subscriptionTypeName": "YEARLY",
        "username": "test2"
    }
]

/api/admin/addNewQuiz
Description: add new quiz
Type: put
Input: QuizDTO
{
  "name": "poll1",
  "noOfQuestions": 3,
  "status": "NOT_PUBLISHED",
  "questions": [
	{
	  "q": "q1",
	  "a": [
		"a1a",
		"a1b",
		"a1c"
	  ],
	  "ca": "a1a"
	},
	{
	  "q": "q2",
	  "a": [
		"a2a",
		"a2b",
		"a2c"
	  ],
	  "ca": "a2b"
	},
	{
	  "q": "q3",
	  "a": [
		"a3a",
		"a3b",
		"a3c"
	  ],
	  "ca": "a3c"
	}
  ]
}
Example: https://localhost:8443/api/admin/addNewQuiz
Output:
{
    "message": "Quiz with this name already exists"
}

/api/admin/getQuiz
Description: Fetches quiz by quiz name or all quizes if no name provided 
Type: get
Input: String name
Example: https://localhost:8443/api/admin/getQuiz?name=poll2
Output:
[
    {
        "id": 2,
        "name": "poll2",
        "createdAt": "2020-04-22T18:29:35.882+0000",
        "noOfQuestions": 3,
        "status": "NOT_PUBLISHED",
        "questions": "[{q=q1, a=[a1a, a1b, a1c], ca=a1a}, {q=q2, a=[a2a, a2b, a2c], ca=a2b}, {q=q3, a=[a3a, a3b, a3c], ca=a3c}]"
    }
]

/api/admin/updateQuiz
Description: modify existing quiz
Type: put
Input: QuizDTO
{
  "name": "poll1",
  "noOfQuestions": 4,
  "status": "NOT_PUBLISHED",
  "questions": [
	{
	  "q": "q1",
	  "a": [
		"a1a",
		"a1b",
		"a1c"
	  ],
	  "ca": "a1a"
	},
	{
	  "q": "q2",
	  "a": [
		"a2a",
		"a2b",
		"a2c"
	  ],
	  "ca": "a2b"
	},
	{
	  "q": "q3",
	  "a": [
		"a3a",
		"a3b",
		"a3c"
	  ],
	  "ca": "a3c"
	}
  ]
}
Example: https://localhost:8443/api/admin/updateQuiz
Output:
{
    "message": "Quiz updated!"
}

/api/admin/getNewQuizesForUser
Description: Fetches all quizes that are PUBLISHED the user has not taken yet 
Type: get
Input: String username
Example: https://localhost:8443/api/admin/getNewQuizesForUser?username=test2
Output:
[
    {
        "id": 30,
        "createdAt": "2020-04-25T09:52:05.783+0000",
        "name": "poll6",
        "noOfQuestions": 3,
        "status": "PUBLISHED",
        "questions": [
            {
                "q": "q1",
                "a": [
                    "a1a",
                    "a1b",
                    "a1c"
                ],
                "ca": "a1a"
            },
            {
                "q": "q2",
                "a": [
                    "a2a",
                    "a2b",
                    "a2c"
                ],
                "ca": "a2b"
            },
            {
                "q": "q3",
                "a": [
                    "a3a",
                    "a3b",
                    "a3c"
                ],
                "ca": "a3c"
            }
        ],
        "answers": null,
        "correctAnswers": 0,
        "username": null
    }
]

/api/admin/getQuizesTakenByUser
Description: Fetches all quizes that are PUBLISHED already taken by user 
Type: get
Input: String username
Example: https://localhost:8443/api/admin/getQuizesTakenByUser?username=test2
Output: (just as example)
[
    {
        "id": 29,
        "createdAt": "2020-04-25T08:01:16.196+0000",
        "name": "Moj novi kviz3",
        "noOfQuestions": 1,
        "status": "PUBLISHED",
        "questions": [
            {
                "question": "p3",
                "answers": [
                    "o1",
                    "o2"
                ],
                "correctAnswer": "o1"
            }
        ],
        "answers": [
            {
                "a": "a1a",
                "q": "qzzzzY"
            },
            {
                "a": "a2a",
                "q": "q2"
            },
            {
                "a": "a3a",
                "q": "q3"
            }
        ],
        "correctAnswers": 1,
        "username": "test2"
    }
]

/api/admin/addQuizAnswers
Description: store quiz answers
Type: put
Input: QuizDTO
{
			"name": "Moj novi kviz3",
			"noOfQuestions": 4,
			"status": "NOT_PUBLISHED",
			"answers": [
				{
				"q": "qzzzzY",
				"a": "a1a"
				},
				{
				"q": "q2",
				"a": "a2a"
				},
				{
				"q": "q3",
				"a": "a3a"
				}
				],
			"correctAnswers": 1,
			"username": "test2"
		}
Example: https://localhost:8443/api/admin/addQuizAnswers
Output:
{
    "message": "Quiz answers saved!"
}

/api/admin/getAllAnswersForQuiz
Description: Fetches all answers by all users that have taken the quiz by quiz name
Type: get
Input: String quizname
Example: https://localhost:8443/api/admin/getAllAnswersForQuiz?quizname=Some quiz
Output: 
[
    {
        "id": 4,
        "createdAt": "2020-04-28T17:30:41.458+0000",
        "name": null,
        "noOfQuestions": 0,
        "status": null,
        "questions": null,
        "answers": [
            {
                "answer": "a",
                "question": "Koje je prvo slovo abecede"
            },
            {
                "answer": "mačka",
                "question": "Izbaci uljeza"
            },
            {
                "answer": "2",
                "question": "koja je najbolja ocjena u školi?"
            },
            {
                "answer": "na pivu",
                "question": "Kuda idu divlje svinje?"
            }
        ],
        "correctAnswers": 2,
        "username": "test2",
        "usersParticipated": 0
    },
    {
        "id": 7,
        "createdAt": "2020-04-29T09:58:39.261+0000",
        "name": null,
        "noOfQuestions": 0,
        "status": null,
        "questions": null,
        "answers": [
            {
                "answer": "c",
                "question": "Koje je prvo slovo abecede"
            },
            {
                "answer": "cesta",
                "question": "Izbaci uljeza"
            },
            {
                "answer": "1",
                "question": "koja je najbolja ocjena u školi?"
            },
            {
                "answer": "na pivu",
                "question": "Kuda idu divlje svinje?"
            }
        ],
        "correctAnswers": 2,
        "username": "test3",
        "usersParticipated": 0
    }
]

/api/admin/getLocationWithWorkingHours
Description: Fetch location(s) with working hours
Type: get
Input: String name (optional)
Example: https://localhost:8443/api/admin/getLocationWithWorkingHours?name=Lokacija1
Output: 
[
    {
        "id": 1,
        "name": "Lokacija1",
        "address": "Neka adresa",
        "workingHours": [
            {
                "id": 1,
                "fromTime": "06:00:00",
                "toTime": "06:00:00",
                "dayType": "WORKDAY"
            },
            {
                "id": 2,
                "fromTime": "07:00:00",
                "toTime": "07:00:00",
                "dayType": "WEEKEND"
            },
            {
                "id": 3,
                "fromTime": "08:00:00",
                "toTime": "08:00:00",
                "dayType": "HOLIDAY"
            }
        ]
    }
]

/api/admin/saveLocationWorkingHours
Description: store working hours for given location
Type: put
Input: LocationWithWorkingHoursDTO
{
        
        "name": "Skrivena lokacja",
        
        "workingHours": [
        	{
                "id": 1,
                "fromTime": "06:00:00",
                "toTime": "21:00:00",
                "dayType": "WORKDAY"
            },
            {
                "id": 2,
                "fromTime": "08:00:00",
                "toTime": "20:00:00",
                "dayType": "WEEKEND"
            },
            {
                "id": 3,
                "fromTime": "09:00:00",
                "toTime": "20:00:00",
                "dayType": "HOLIDAY"
            }
        	]
        
    }
Example: https://localhost:8443/api/admin/saveLocationWorkingHours
Output:
{
    "message": "Working hours saved!"
}


